/*global unexpected*/
// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.
// It is built based on the examples in the documentation folder
// when the documentation site gets build by running "make site-build".
it.skipIf = function (condition) {
    (condition ? it.skip : it).apply(it, Array.prototype.slice.call(arguments, 1));
};

describe("documentation tests", function () {
    var isBrowser = typeof weknowhow !== 'undefined';
    var isPhantom = typeof mochaPhantomJS !== 'undefined';
    var expect;
    beforeEach(function () {
        expect = unexpected.clone();
        expect.output.preferredWidth = 80;

    });

    it("api/add.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add('(', 4, 7, ']', 'foo');
        expect(insection.contains('(', 4, 7, ']'), 'to be true');
        return expect.promise.all(testPromises);
    });

    it("api/constructor.md contains correct examples", function () {
        var testPromises = [];
        function defaultValueComparer(x, y) {
            if (x < y) { return -1; }
            if (x > y) { return 1; }
            return 0;
        }
        return expect.promise.all(testPromises);
    });

    it("api/contains.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add(0, 4, 'foo');
        insection.add('(', 2, 6, ']', 'bar');
        expect(insection.contains(0, 4), 'to be true');
        expect(insection.contains('(', 0, 4, ']'), 'to be false');
        expect(insection.contains('[', 0, 4, ']'), 'to be true');
        expect(insection.contains(0, 5), 'to be false');
        return expect.promise.all(testPromises);
    });

    it("api/get.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add(0, 4, 'foo');
        insection.add('(', 2, 6, ']', 'bar');
        insection.add('[', 2, Infinity, ')', 'baz');
        insection.add('[', 2, Infinity, ')', 'qux');
        expect(insection.get(1, 5).sort(), 'to equal', ['bar', 'baz', 'foo', 'qux']);
        expect(insection.get(0, 2).sort(), 'to equal', ['baz', 'foo', 'qux']);
        expect(insection.get('(', -Infinity, 2, ')').sort(), 'to equal', ['foo']);
        expect(insection.get(2).sort(), 'to equal', ['baz', 'foo', 'qux']);
        expect(insection.get().sort(), 'to equal', ['bar', 'baz', 'foo', 'qux']);
        return expect.promise.all(testPromises);
    });

    it("api/getEntries.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add(0, 4, 'foo');
        insection.add('(', 2, 6, ']', 'bar');
        expect(insection.getEntries(1, 5).map(function (entry) {
            return entry.interval + ' => ' + entry.value;
        }).sort(), 'to equal', ['(2;6] => bar', '[0;4] => foo']);
        expect(insection.getEntries().map(function (entry) {
            return entry.interval + ' => ' + entry.value;
        }).sort(), 'to equal', ['(2;6] => bar', '[0;4] => foo']);
        return expect.promise.all(testPromises);
    });

    it("api/getGaps.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add(0, 2, '0');
        insection.add(3, 6, '1');
        insection.add('[', 5, 7, ')', '2');
        insection.add('(', 7, 8, ']', '3');
        insection.add(9, 10, '4');
        expect(insection.getGaps(0, 10).map(function (interval) {
            return interval.toString();
        }).sort(), 'to equal', [ '(2;3)', '(8;9)', '[7;7]' ]);
        return expect.promise.all(testPromises);
    });

    it("api/getIntervals.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add(0, 4, 'foo');
        insection.add('(', 2, 6, ']', 'bar');
        insection.add('[', 2, Infinity, ')', 'baz');
        insection.add('[', 2, Infinity, ')', 'qux');
        expect(insection.getIntervals(1, 5).map(String).sort(), 'to equal', [
          '(2;6]',
          '[0;4]',
          '[2;Infinity)',
          '[2;Infinity)'
        ]);
        expect(insection.getIntervals(0, 2).map(String).sort(), 'to equal', [
          '[0;4]',
          '[2;Infinity)',
          '[2;Infinity)'
        ]);
        expect(insection.getIntervals('(', -Infinity, 2, ')').map(String).sort(), 'to equal', ['[0;4]']);
        expect(insection.getIntervals(2).map(String).sort(), 'to equal', [
          '[0;4]',
          '[2;Infinity)',
          '[2;Infinity)'
        ]);
        expect(insection.getIntervals().map(String).sort(), 'to equal', [
          '(2;6]',
          '[0;4]',
          '[2;Infinity)',
          '[2;Infinity)'
        ]);
        return expect.promise.all(testPromises);
    });

    it("api/interval.md contains correct examples", function () {
        var testPromises = [];
        expect(Insection.interval(4).toString(), 'to be', '[4;4]');
        expect(Insection.interval(4, 5).toString(), 'to be', '[4;5]');
        expect(Insection.interval('[', 4, 5, ']').toString(), 'to be', '[4;5]');
        expect(Insection.interval('[', 4, 5, ')').toString(), 'to be', '[4;5)');
        expect(Insection.interval('(', 4, 5, ']').toString(), 'to be', '(4;5]');
        expect(Insection.interval('(', 4, 5, ')').toString(), 'to be', '(4;5)');
        return expect.promise.all(testPromises);
    });

    it("api/isEmpty.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        expect(insection.isEmpty(), 'to be true');
        insection.add('(', 4, 7, ']', 'foo');
        expect(insection.isEmpty(), 'to be false');
        return expect.promise.all(testPromises);
    });

    it("api/remove.md contains correct examples", function () {
        var testPromises = [];
        var insection = new Insection();
        insection.add('(', 4, 7, ']', 'foo');
        insection.add('[', 4, 7, ']', 'bar');
        insection.remove('(', 4, 7, ']', 'foo');
        expect(insection.contains('(', 4, 7, ']'), 'to be false');
        expect(insection.contains('[', 4, 7, ']'), 'to be true');
        return expect.promise.all(testPromises);
    });
});
